name: deploy to ECS on Fargate

on:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: laravel-cluster
  ECS_LARAVEL_SERVICE: laravel-service
  APP_CONTAINER_NAME: laravel-app-container
  WEB_CONTAINER_NAME: laravel-web-container
  APP_TAG: 1.0.0
  WEB_TAG: 1.0.0
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: checkout
        uses: action/checkout@v2

      # AWSへログイン

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECRへログイン

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 本番運用のコンテナBuildとECRへのpush

      - name: app push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run:  |
          cd ./infra/docker/php
          docker build --platform linux/amd64  -t  $ECR_REGISTRY/$APP_CONTAINER_NAME:$APP_TAG . --target deploy
          docker tag $ECR_REGISTRY/$APP_CONTAINER_NAME:$APP_TAG $ECR_REGISTRY/$APP_CONTAINER_NAME:latest
          docker push $ECR_REGISTRY/$APP_CONTAINER_NAME:$APP_TAG
          docker push $ECR_REGISTRY/$APP_CONTAINER_NAME:latest

      - name: web push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run:  |
          cd ./infra/docker/php
          docker build --platform linux/amd64  -t  $ECR_REGISTRY/$WEB_CONTAINER_NAME:$WEB_TAG .
          docker tag $ECR_REGISTRY/$WEB_CONTAINER_NAME:$WEB_TAG $ECR_REGISTRY/$WEB_CONTAINER_NAME:latest
          docker push $ECR_REGISTRY/$WEB_CONTAINER_NAME:$WEB_TAG
          docker push $ECR_REGISTRY/$WEB_CONTAINER_NAME:latest

      # ECS再起動

      - name: Deploy to ECS
        run: |
          aws ecs update-service --service $ECS_LARAVEL_SERVICE --cluster ECS_CLUSTER --force-new-deployment

      #slackへ結果を通知

      - name: Success
        uses: rtCamp/action-slack-notify@v2.0.2
        if: success()
        env:
          SLACK_TITLE: deploy flow / Success
          SLACK_COLOR: good
          SLACK_MESSAGE: Message for Success

      - name: Failure
        uses: rtCamp/action-slack-notify@v2.0.2
        if: failure()
        env:
          SLACK_TITLE: deploy flow / Failure
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for Failure

      - name: Cancel
        uses: rtCamp/action-slack-notify@v2.0.2
        if: cancelled()
        env:
          SLACK_TITLE: deploy flow / Cancel
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for Cancel
